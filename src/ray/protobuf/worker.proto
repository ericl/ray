syntax = "proto3";

package ray.rpc;

import "src/ray/protobuf/common.proto";

message ActiveObjectIDs {
  repeated bytes object_ids = 1;
}

message AssignTaskRequest {
  // The task to be pushed.
  Task task = 1;
  // A list of the resources reserved for this worker.
  // TODO(zhijunfu): `resource_ids` is represented as
  // flatbutters-serialized bytes, will be moved to protobuf later.
  bytes resource_ids = 2;
}

message AssignTaskReply {
}

message DirectActorCallArgWaitCompleteRequest {
  // Id used to uniquely identify this request. This is sent back to the core
  // worker to notify the wait has completed.
  int64 tag = 1;
}

message DirectActorCallArgWaitCompleteReply {
}

// Service for worker.
service WorkerTaskService {
  // Push a task to a worker.
  rpc AssignTask(AssignTaskRequest) returns (AssignTaskReply);
  // Notify wait for direct actor call args has completed
  rpc DirectActorCallArgWaitComplete(DirectActorCallArgWaitCompleteRequest) returns (DirectActorCallArgWaitCompleteReply);
}
